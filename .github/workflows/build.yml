name: Build hiyaCFW

on:
  push:
    branches: ["*"]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: ["*"]
    paths-ignore:
      - 'README.md'
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm
    name: Build with Docker using devkitARM
    outputs:
      commit_tag: ${{ steps.build.outputs.commit_tag }}
      commit_message: ${{ steps.build.outputs.commit_message }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v1
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install python -y
      - name: Build
        id: build
        run: |
          make

          echo ::set-output name=commit_tag::$(git log --format=%h -1)
          echo ::set-output name=commit_message::$(git log --pretty=format:'%an - %s' -1)
      - name: Pack 7z for nightly
        if: ${{ !startsWith(github.ref, 'refs/tags') }}
        run: |
          mkdir hiyaCFW
          cp hiya.dsi hiyaCFW
          7z a hiyaCFW.7z hiyaCFW
      - name: Pack 7z for release
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          mkdir "for SDNAND SD card"
          cp hiya.dsi "for SDNAND SD card"
          7z a template.7z "for SDNAND SD card"
          mv template.7z hiyaCFW.7z
      - name: Publish build to GH Actions
        uses: actions/upload-artifact@v2
        with:
          path: ~/hiyaCFW.7z
          name: build

  # Only run this for non-PR jobs.
  publish_build_extras:
    runs-on: ubuntu-latest
    name: Publish build to TWLBot/Builds
    if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
    needs: build
    env:
      COMMIT_TAG: ${{ needs.build.outputs.commit_tag }}
      COMMIT_MESSAGE: ${{ needs.build.outputs.commit_message }}
    outputs:
      current_date: ${{ steps.commit.outputs.current_date }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Upload to ${{ github.repository }} release
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          ID=$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)

          for file in ${{ github.workspace }}/build/*; do
            AUTH_HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
            CONTENT_LENGTH="Content-Length: $(stat -c%s $file)"
            CONTENT_TYPE="Content-Type: application/7z-x-compressed"
            UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$ID/assets?name=$(basename $file)"

            curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_LENGTH" -H "$CONTENT_TYPE" --upload-file "$file" "$UPLOAD_URL"
          done
      - name: Commit and push to TWLBot/Builds
        if: ${{ !startsWith(github.ref, 'refs/tags') }}
        id: commit
        run: |
          CURRENT_DATE=$(date +"%Y%m%d-%H%M%S")
          echo "::set-output name=current_date::$CURRENT_DATE"

          git config --global user.email "flamekat54@aol.com"
          git config --global user.name "TWLBot"
          git clone --depth 1 https://${{ secrets.TWLBOT_TOKEN }}@github.com/TWLBot/Builds.git
          mkdir -p Builds/extras
          cd Builds/extras
          cp ${{ github.workspace }}/build/* .
          git stage .
          git commit -m "hiyaCFW | $COMMIT_TAG"
          git tag v$CURRENT_DATE
          git push origin master v$CURRENT_DATE
      - name: Release to TWLBot/Builds
        if: ${{ !startsWith(github.ref, 'refs/tags') }}
        run: |
          AUTH_HEADER="Authorization: token ${{ secrets.TWLBOT_TOKEN }}"
          CONTENT_TYPE="Content-Type: application/json"
          API_URL="https://api.github.com/repos/TWLBot/Builds/releases"
          RELEASE_INFO="{\"tag_name\": \"v${{ steps.commit.outputs.current_date }}\", \"name\": \"hiyaCFW | $COMMIT_TAG\", \"body\": \"$COMMIT_MESSAGE\", \"prerelease\": true}"

          RESPONSE=$(curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_TYPE" "$API_URL" -d "$RELEASE_INFO")

          ID=$(echo $RESPONSE | jq --raw-output '.id')

          for file in ${{ github.workspace }}/build/*; do
            AUTH_HEADER="Authorization: token ${{ secrets.TWLBOT_TOKEN }}"
            CONTENT_LENGTH="Content-Length: $(stat -c%s $file)"
            CONTENT_TYPE="Content-Type: application/7z-x-compressed"
            UPLOAD_URL="https://uploads.github.com/repos/TWLBot/Builds/releases/$ID/assets?name=$(basename $file)"

            curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_LENGTH" -H "$CONTENT_TYPE" --upload-file "$file" "$UPLOAD_URL"
          done

  send_webhook_success:
    runs-on: ubuntu-latest
    needs: [publish_build_extras, build]
    name: Send Discord success webhook
    if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
    env:
      CURRENT_DATE: ${{ needs.publish_build_extras.outputs.current_date }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v1
      - name: Send success webhook
        run: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-ghactions.sh
          chmod +x send.sh
          ./send.sh success ${{ secrets.WEBHOOK_URL }}

  send_webhook_failure:
    runs-on: ubuntu-latest
    needs: [publish_build_extras, build]
    name: Send Discord failure webhook
    if: ${{ failure() && !startsWith(github.ref, 'refs/pull') }}
    env:
      CURRENT_DATE: ${{ needs.publish_build_extras.outputs.current_date }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v1
      - name: Send failure webhook
        run: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-ghactions.sh
          chmod +x send.sh
          ./send.sh failure ${{ secrets.WEBHOOK_URL }}
